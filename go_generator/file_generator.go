package go_generator

import (
	"fmt"
	"strings"
)

type GoFileBuilder struct {
	generatedBy     string
	packageName     string
	imports         []*goImport
	initializedVars []*goVarInitializer
	declaredVars    []*goVarDecl
	functions       []*GoFunctionBuilder
	structs         []*GoStructBuilder
	raw             []string
}

type goImport struct {
	alias *string
	path  string
}

type goVarInitializer struct {
	name        string
	initializer string
}

func NewGoFileBuilder(generatedBy string, packageName string) *GoFileBuilder {
	return &GoFileBuilder{
		generatedBy:     generatedBy,
		packageName:     packageName,
		imports:         []*goImport{},
		initializedVars: []*goVarInitializer{},
		declaredVars:    []*goVarDecl{},
		functions:       []*GoFunctionBuilder{},
		structs:         []*GoStructBuilder{},
		raw:             []string{},
	}
}

func (b *GoFileBuilder) AddImport(path string) *GoFileBuilder {
	b.imports = append(b.imports, &goImport{alias: nil, path: path})
	return b
}

func (b *GoFileBuilder) AddAliasedImport(alias string, path string) *GoFileBuilder {
	b.imports = append(b.imports, &goImport{alias: &alias, path: path})
	return b
}

func (b *GoFileBuilder) AddVarInitializer(name string, initializer string) *GoFileBuilder {
	b.initializedVars = append(b.initializedVars, &goVarInitializer{name: name, initializer: initializer})
	return b
}

func (b *GoFileBuilder) AddVarDeclaration(name string, declType string) *GoFileBuilder {
	b.declaredVars = append(b.declaredVars, &goVarDecl{name: name, declType: declType})
	return b
}

func (b *GoFileBuilder) AddFunction(function *GoFunctionBuilder) *GoFileBuilder {
	b.functions = append(b.functions, function)
	return b
}

func (b *GoFileBuilder) AddStruct(structBuilder *GoStructBuilder) *GoFileBuilder {
	b.structs = append(b.structs, structBuilder)
	return b
}

func (b *GoFileBuilder) AddRaw(raw string) *GoFileBuilder {
	b.raw = append(b.raw, raw)
	return b
}

func (b *GoFileBuilder) Build() string {
	var sb strings.Builder
	// Header and Package
	sb.WriteString(fmt.Sprintf("// Code generated by %v; DO NOT EDIT.\n", b.generatedBy))
	sb.WriteString(fmt.Sprintf("package %v\n", b.packageName))

	// Imports
	if len(b.imports) > 0 {
		sb.WriteString("\nimport (\n")
		for _, imp := range b.imports {
			if imp.alias != nil {
				sb.WriteString(fmt.Sprintf("\t%v \"%v\"\n", *imp.alias, imp.path))
			} else {
				sb.WriteString(fmt.Sprintf("\t\"%v\"\n", imp.path))
			}
		}
		sb.WriteString(")\n")
	}

	// Global Vars
	if len(b.declaredVars) > 0 || len(b.initializedVars) > 0 {
		sb.WriteString("\nvar (\n")
		for _, v := range b.declaredVars {
			sb.WriteString(fmt.Sprintf("\t%v\n", v.String()))
		}
		for _, v := range b.initializedVars {
			sb.WriteString(fmt.Sprintf("\t%v = %v\n", v.name, v.initializer))
		}
		sb.WriteString(")\n")
	}

	// Functions
	if len(b.functions) > 0 {
		for _, function := range b.functions {
			sb.WriteString("\n")
			sb.WriteString(function.Build())
		}
	}

	// Structs
	if len(b.structs) > 0 {
		for _, st := range b.structs {
			sb.WriteString("\n")
			sb.WriteString(st.Build())
		}
	}

	// Raw
	if len(b.raw) > 0 {
		for _, raw := range b.raw {
			sb.WriteString("\n")
			sb.WriteString(raw)
		}
		sb.WriteString("\n")
	}

	return sb.String()
}
